/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.github;

@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-04-25")
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class CargoService {

  public interface Iface extends BaseService.Iface {

    public java.lang.String calculateShippingCost(Cargo cargo) throws EmptyCargoException, CargoWeigtExceededException, org.apache.thrift.TException;

    public int sendCargo(Cargo cargo) throws EmptyCargoException, CargoWeigtExceededException, org.apache.thrift.TException;

    public DeliveryStatus checkStatusByHash(int hash) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends BaseService.AsyncIface {

    public void calculateShippingCost(Cargo cargo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void sendCargo(Cargo cargo, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void checkStatusByHash(int hash, org.apache.thrift.async.AsyncMethodCallback<DeliveryStatus> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends BaseService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public java.lang.String calculateShippingCost(Cargo cargo) throws EmptyCargoException, CargoWeigtExceededException, org.apache.thrift.TException
    {
      send_calculateShippingCost(cargo);
      return recv_calculateShippingCost();
    }

    public void send_calculateShippingCost(Cargo cargo) throws org.apache.thrift.TException
    {
      calculateShippingCost_args args = new calculateShippingCost_args();
      args.setCargo(cargo);
      sendBase("calculateShippingCost", args);
    }

    public java.lang.String recv_calculateShippingCost() throws EmptyCargoException, CargoWeigtExceededException, org.apache.thrift.TException
    {
      calculateShippingCost_result result = new calculateShippingCost_result();
      receiveBase(result, "calculateShippingCost");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.emptyException != null) {
        throw result.emptyException;
      }
      if (result.weightException != null) {
        throw result.weightException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "calculateShippingCost failed: unknown result");
    }

    @Override
    public int sendCargo(Cargo cargo) throws EmptyCargoException, CargoWeigtExceededException, org.apache.thrift.TException
    {
      send_sendCargo(cargo);
      return recv_sendCargo();
    }

    public void send_sendCargo(Cargo cargo) throws org.apache.thrift.TException
    {
      sendCargo_args args = new sendCargo_args();
      args.setCargo(cargo);
      sendBase("sendCargo", args);
    }

    public int recv_sendCargo() throws EmptyCargoException, CargoWeigtExceededException, org.apache.thrift.TException
    {
      sendCargo_result result = new sendCargo_result();
      receiveBase(result, "sendCargo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.emptyException != null) {
        throw result.emptyException;
      }
      if (result.weightException != null) {
        throw result.weightException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendCargo failed: unknown result");
    }

    @Override
    public DeliveryStatus checkStatusByHash(int hash) throws org.apache.thrift.TException
    {
      send_checkStatusByHash(hash);
      return recv_checkStatusByHash();
    }

    public void send_checkStatusByHash(int hash) throws org.apache.thrift.TException
    {
      checkStatusByHash_args args = new checkStatusByHash_args();
      args.setHash(hash);
      sendBase("checkStatusByHash", args);
    }

    public DeliveryStatus recv_checkStatusByHash() throws org.apache.thrift.TException
    {
      checkStatusByHash_result result = new checkStatusByHash_result();
      receiveBase(result, "checkStatusByHash");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkStatusByHash failed: unknown result");
    }

  }
  public static class AsyncClient extends BaseService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void calculateShippingCost(Cargo cargo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      calculateShippingCost_call method_call = new calculateShippingCost_call(cargo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class calculateShippingCost_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private Cargo cargo;
      public calculateShippingCost_call(Cargo cargo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cargo = cargo;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("calculateShippingCost", org.apache.thrift.protocol.TMessageType.CALL, 0));
        calculateShippingCost_args args = new calculateShippingCost_args();
        args.setCargo(cargo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.String getResult() throws EmptyCargoException, CargoWeigtExceededException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_calculateShippingCost();
      }
    }

    @Override
    public void sendCargo(Cargo cargo, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendCargo_call method_call = new sendCargo_call(cargo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendCargo_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private Cargo cargo;
      public sendCargo_call(Cargo cargo, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cargo = cargo;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendCargo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendCargo_args args = new sendCargo_args();
        args.setCargo(cargo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Integer getResult() throws EmptyCargoException, CargoWeigtExceededException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendCargo();
      }
    }

    @Override
    public void checkStatusByHash(int hash, org.apache.thrift.async.AsyncMethodCallback<DeliveryStatus> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkStatusByHash_call method_call = new checkStatusByHash_call(hash, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkStatusByHash_call extends org.apache.thrift.async.TAsyncMethodCall<DeliveryStatus> {
      private int hash;
      public checkStatusByHash_call(int hash, org.apache.thrift.async.AsyncMethodCallback<DeliveryStatus> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hash = hash;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkStatusByHash", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkStatusByHash_args args = new checkStatusByHash_args();
        args.setHash(hash);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public DeliveryStatus getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkStatusByHash();
      }
    }

  }

  public static class Processor<I extends Iface> extends BaseService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("calculateShippingCost", new calculateShippingCost());
      processMap.put("sendCargo", new sendCargo());
      processMap.put("checkStatusByHash", new checkStatusByHash());
      return processMap;
    }

    public static class calculateShippingCost<I extends Iface> extends org.apache.thrift.ProcessFunction<I, calculateShippingCost_args> {
      public calculateShippingCost() {
        super("calculateShippingCost");
      }

      @Override
      public calculateShippingCost_args getEmptyArgsInstance() {
        return new calculateShippingCost_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public calculateShippingCost_result getResult(I iface, calculateShippingCost_args args) throws org.apache.thrift.TException {
        calculateShippingCost_result result = new calculateShippingCost_result();
        try {
          result.success = iface.calculateShippingCost(args.cargo);
        } catch (EmptyCargoException emptyException) {
          result.emptyException = emptyException;
        } catch (CargoWeigtExceededException weightException) {
          result.weightException = weightException;
        }
        return result;
      }
    }

    public static class sendCargo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendCargo_args> {
      public sendCargo() {
        super("sendCargo");
      }

      @Override
      public sendCargo_args getEmptyArgsInstance() {
        return new sendCargo_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public sendCargo_result getResult(I iface, sendCargo_args args) throws org.apache.thrift.TException {
        sendCargo_result result = new sendCargo_result();
        try {
          result.success = iface.sendCargo(args.cargo);
          result.setSuccessIsSet(true);
        } catch (EmptyCargoException emptyException) {
          result.emptyException = emptyException;
        } catch (CargoWeigtExceededException weightException) {
          result.weightException = weightException;
        }
        return result;
      }
    }

    public static class checkStatusByHash<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkStatusByHash_args> {
      public checkStatusByHash() {
        super("checkStatusByHash");
      }

      @Override
      public checkStatusByHash_args getEmptyArgsInstance() {
        return new checkStatusByHash_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public checkStatusByHash_result getResult(I iface, checkStatusByHash_args args) throws org.apache.thrift.TException {
        checkStatusByHash_result result = new checkStatusByHash_result();
        result.success = iface.checkStatusByHash(args.hash);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends BaseService.AsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("calculateShippingCost", new calculateShippingCost());
      processMap.put("sendCargo", new sendCargo());
      processMap.put("checkStatusByHash", new checkStatusByHash());
      return processMap;
    }

    public static class calculateShippingCost<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, calculateShippingCost_args, java.lang.String> {
      public calculateShippingCost() {
        super("calculateShippingCost");
      }

      @Override
      public calculateShippingCost_args getEmptyArgsInstance() {
        return new calculateShippingCost_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          @Override
          public void onComplete(java.lang.String o) {
            calculateShippingCost_result result = new calculateShippingCost_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            calculateShippingCost_result result = new calculateShippingCost_result();
            if (e instanceof EmptyCargoException) {
              result.emptyException = (EmptyCargoException) e;
              result.setEmptyExceptionIsSet(true);
              msg = result;
            } else if (e instanceof CargoWeigtExceededException) {
              result.weightException = (CargoWeigtExceededException) e;
              result.setWeightExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, calculateShippingCost_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.calculateShippingCost(args.cargo,resultHandler);
      }
    }

    public static class sendCargo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendCargo_args, java.lang.Integer> {
      public sendCargo() {
        super("sendCargo");
      }

      @Override
      public sendCargo_args getEmptyArgsInstance() {
        return new sendCargo_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          @Override
          public void onComplete(java.lang.Integer o) {
            sendCargo_result result = new sendCargo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            sendCargo_result result = new sendCargo_result();
            if (e instanceof EmptyCargoException) {
              result.emptyException = (EmptyCargoException) e;
              result.setEmptyExceptionIsSet(true);
              msg = result;
            } else if (e instanceof CargoWeigtExceededException) {
              result.weightException = (CargoWeigtExceededException) e;
              result.setWeightExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, sendCargo_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.sendCargo(args.cargo,resultHandler);
      }
    }

    public static class checkStatusByHash<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkStatusByHash_args, DeliveryStatus> {
      public checkStatusByHash() {
        super("checkStatusByHash");
      }

      @Override
      public checkStatusByHash_args getEmptyArgsInstance() {
        return new checkStatusByHash_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<DeliveryStatus> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<DeliveryStatus>() { 
          @Override
          public void onComplete(DeliveryStatus o) {
            checkStatusByHash_result result = new checkStatusByHash_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            checkStatusByHash_result result = new checkStatusByHash_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, checkStatusByHash_args args, org.apache.thrift.async.AsyncMethodCallback<DeliveryStatus> resultHandler) throws org.apache.thrift.TException {
        iface.checkStatusByHash(args.hash,resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class calculateShippingCost_args implements org.apache.thrift.TBase<calculateShippingCost_args, calculateShippingCost_args._Fields>, java.io.Serializable, Cloneable, Comparable<calculateShippingCost_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("calculateShippingCost_args");

    private static final org.apache.thrift.protocol.TField CARGO_FIELD_DESC = new org.apache.thrift.protocol.TField("cargo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new calculateShippingCost_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new calculateShippingCost_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Cargo cargo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CARGO((short)1, "cargo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CARGO
            return CARGO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CARGO, new org.apache.thrift.meta_data.FieldMetaData("cargo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Cargo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(calculateShippingCost_args.class, metaDataMap);
    }

    public calculateShippingCost_args() {
    }

    public calculateShippingCost_args(
      Cargo cargo)
    {
      this();
      this.cargo = cargo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public calculateShippingCost_args(calculateShippingCost_args other) {
      if (other.isSetCargo()) {
        this.cargo = new Cargo(other.cargo);
      }
    }

    @Override
    public calculateShippingCost_args deepCopy() {
      return new calculateShippingCost_args(this);
    }

    @Override
    public void clear() {
      this.cargo = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Cargo getCargo() {
      return this.cargo;
    }

    public calculateShippingCost_args setCargo(@org.apache.thrift.annotation.Nullable Cargo cargo) {
      this.cargo = cargo;
      return this;
    }

    public void unsetCargo() {
      this.cargo = null;
    }

    /** Returns true if field cargo is set (has been assigned a value) and false otherwise */
    public boolean isSetCargo() {
      return this.cargo != null;
    }

    public void setCargoIsSet(boolean value) {
      if (!value) {
        this.cargo = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CARGO:
        if (value == null) {
          unsetCargo();
        } else {
          setCargo((Cargo)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CARGO:
        return getCargo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CARGO:
        return isSetCargo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof calculateShippingCost_args)
        return this.equals((calculateShippingCost_args)that);
      return false;
    }

    public boolean equals(calculateShippingCost_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cargo = true && this.isSetCargo();
      boolean that_present_cargo = true && that.isSetCargo();
      if (this_present_cargo || that_present_cargo) {
        if (!(this_present_cargo && that_present_cargo))
          return false;
        if (!this.cargo.equals(that.cargo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCargo()) ? 131071 : 524287);
      if (isSetCargo())
        hashCode = hashCode * 8191 + cargo.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(calculateShippingCost_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCargo(), other.isSetCargo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCargo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cargo, other.cargo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("calculateShippingCost_args(");
      boolean first = true;

      sb.append("cargo:");
      if (this.cargo == null) {
        sb.append("null");
      } else {
        sb.append(this.cargo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cargo != null) {
        cargo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class calculateShippingCost_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public calculateShippingCost_argsStandardScheme getScheme() {
        return new calculateShippingCost_argsStandardScheme();
      }
    }

    private static class calculateShippingCost_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<calculateShippingCost_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, calculateShippingCost_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CARGO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cargo = new Cargo();
                struct.cargo.read(iprot);
                struct.setCargoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, calculateShippingCost_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cargo != null) {
          oprot.writeFieldBegin(CARGO_FIELD_DESC);
          struct.cargo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class calculateShippingCost_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public calculateShippingCost_argsTupleScheme getScheme() {
        return new calculateShippingCost_argsTupleScheme();
      }
    }

    private static class calculateShippingCost_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<calculateShippingCost_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, calculateShippingCost_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCargo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCargo()) {
          struct.cargo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, calculateShippingCost_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cargo = new Cargo();
          struct.cargo.read(iprot);
          struct.setCargoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class calculateShippingCost_result implements org.apache.thrift.TBase<calculateShippingCost_result, calculateShippingCost_result._Fields>, java.io.Serializable, Cloneable, Comparable<calculateShippingCost_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("calculateShippingCost_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField EMPTY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("emptyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField WEIGHT_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("weightException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new calculateShippingCost_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new calculateShippingCost_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required
    public @org.apache.thrift.annotation.Nullable EmptyCargoException emptyException; // required
    public @org.apache.thrift.annotation.Nullable CargoWeigtExceededException weightException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EMPTY_EXCEPTION((short)1, "emptyException"),
      WEIGHT_EXCEPTION((short)2, "weightException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EMPTY_EXCEPTION
            return EMPTY_EXCEPTION;
          case 2: // WEIGHT_EXCEPTION
            return WEIGHT_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EMPTY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("emptyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EmptyCargoException.class)));
      tmpMap.put(_Fields.WEIGHT_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("weightException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CargoWeigtExceededException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(calculateShippingCost_result.class, metaDataMap);
    }

    public calculateShippingCost_result() {
    }

    public calculateShippingCost_result(
      java.lang.String success,
      EmptyCargoException emptyException,
      CargoWeigtExceededException weightException)
    {
      this();
      this.success = success;
      this.emptyException = emptyException;
      this.weightException = weightException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public calculateShippingCost_result(calculateShippingCost_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetEmptyException()) {
        this.emptyException = new EmptyCargoException(other.emptyException);
      }
      if (other.isSetWeightException()) {
        this.weightException = new CargoWeigtExceededException(other.weightException);
      }
    }

    @Override
    public calculateShippingCost_result deepCopy() {
      return new calculateShippingCost_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.emptyException = null;
      this.weightException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public calculateShippingCost_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public EmptyCargoException getEmptyException() {
      return this.emptyException;
    }

    public calculateShippingCost_result setEmptyException(@org.apache.thrift.annotation.Nullable EmptyCargoException emptyException) {
      this.emptyException = emptyException;
      return this;
    }

    public void unsetEmptyException() {
      this.emptyException = null;
    }

    /** Returns true if field emptyException is set (has been assigned a value) and false otherwise */
    public boolean isSetEmptyException() {
      return this.emptyException != null;
    }

    public void setEmptyExceptionIsSet(boolean value) {
      if (!value) {
        this.emptyException = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public CargoWeigtExceededException getWeightException() {
      return this.weightException;
    }

    public calculateShippingCost_result setWeightException(@org.apache.thrift.annotation.Nullable CargoWeigtExceededException weightException) {
      this.weightException = weightException;
      return this;
    }

    public void unsetWeightException() {
      this.weightException = null;
    }

    /** Returns true if field weightException is set (has been assigned a value) and false otherwise */
    public boolean isSetWeightException() {
      return this.weightException != null;
    }

    public void setWeightExceptionIsSet(boolean value) {
      if (!value) {
        this.weightException = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case EMPTY_EXCEPTION:
        if (value == null) {
          unsetEmptyException();
        } else {
          setEmptyException((EmptyCargoException)value);
        }
        break;

      case WEIGHT_EXCEPTION:
        if (value == null) {
          unsetWeightException();
        } else {
          setWeightException((CargoWeigtExceededException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EMPTY_EXCEPTION:
        return getEmptyException();

      case WEIGHT_EXCEPTION:
        return getWeightException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EMPTY_EXCEPTION:
        return isSetEmptyException();
      case WEIGHT_EXCEPTION:
        return isSetWeightException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof calculateShippingCost_result)
        return this.equals((calculateShippingCost_result)that);
      return false;
    }

    public boolean equals(calculateShippingCost_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_emptyException = true && this.isSetEmptyException();
      boolean that_present_emptyException = true && that.isSetEmptyException();
      if (this_present_emptyException || that_present_emptyException) {
        if (!(this_present_emptyException && that_present_emptyException))
          return false;
        if (!this.emptyException.equals(that.emptyException))
          return false;
      }

      boolean this_present_weightException = true && this.isSetWeightException();
      boolean that_present_weightException = true && that.isSetWeightException();
      if (this_present_weightException || that_present_weightException) {
        if (!(this_present_weightException && that_present_weightException))
          return false;
        if (!this.weightException.equals(that.weightException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetEmptyException()) ? 131071 : 524287);
      if (isSetEmptyException())
        hashCode = hashCode * 8191 + emptyException.hashCode();

      hashCode = hashCode * 8191 + ((isSetWeightException()) ? 131071 : 524287);
      if (isSetWeightException())
        hashCode = hashCode * 8191 + weightException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(calculateShippingCost_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEmptyException(), other.isSetEmptyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmptyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emptyException, other.emptyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetWeightException(), other.isSetWeightException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWeightException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weightException, other.weightException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("calculateShippingCost_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("emptyException:");
      if (this.emptyException == null) {
        sb.append("null");
      } else {
        sb.append(this.emptyException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("weightException:");
      if (this.weightException == null) {
        sb.append("null");
      } else {
        sb.append(this.weightException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class calculateShippingCost_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public calculateShippingCost_resultStandardScheme getScheme() {
        return new calculateShippingCost_resultStandardScheme();
      }
    }

    private static class calculateShippingCost_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<calculateShippingCost_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, calculateShippingCost_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EMPTY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.emptyException = new EmptyCargoException();
                struct.emptyException.read(iprot);
                struct.setEmptyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WEIGHT_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.weightException = new CargoWeigtExceededException();
                struct.weightException.read(iprot);
                struct.setWeightExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, calculateShippingCost_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.emptyException != null) {
          oprot.writeFieldBegin(EMPTY_EXCEPTION_FIELD_DESC);
          struct.emptyException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.weightException != null) {
          oprot.writeFieldBegin(WEIGHT_EXCEPTION_FIELD_DESC);
          struct.weightException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class calculateShippingCost_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public calculateShippingCost_resultTupleScheme getScheme() {
        return new calculateShippingCost_resultTupleScheme();
      }
    }

    private static class calculateShippingCost_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<calculateShippingCost_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, calculateShippingCost_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEmptyException()) {
          optionals.set(1);
        }
        if (struct.isSetWeightException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetEmptyException()) {
          struct.emptyException.write(oprot);
        }
        if (struct.isSetWeightException()) {
          struct.weightException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, calculateShippingCost_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.emptyException = new EmptyCargoException();
          struct.emptyException.read(iprot);
          struct.setEmptyExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.weightException = new CargoWeigtExceededException();
          struct.weightException.read(iprot);
          struct.setWeightExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class sendCargo_args implements org.apache.thrift.TBase<sendCargo_args, sendCargo_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendCargo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendCargo_args");

    private static final org.apache.thrift.protocol.TField CARGO_FIELD_DESC = new org.apache.thrift.protocol.TField("cargo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendCargo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendCargo_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Cargo cargo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CARGO((short)1, "cargo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CARGO
            return CARGO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CARGO, new org.apache.thrift.meta_data.FieldMetaData("cargo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Cargo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendCargo_args.class, metaDataMap);
    }

    public sendCargo_args() {
    }

    public sendCargo_args(
      Cargo cargo)
    {
      this();
      this.cargo = cargo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendCargo_args(sendCargo_args other) {
      if (other.isSetCargo()) {
        this.cargo = new Cargo(other.cargo);
      }
    }

    @Override
    public sendCargo_args deepCopy() {
      return new sendCargo_args(this);
    }

    @Override
    public void clear() {
      this.cargo = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Cargo getCargo() {
      return this.cargo;
    }

    public sendCargo_args setCargo(@org.apache.thrift.annotation.Nullable Cargo cargo) {
      this.cargo = cargo;
      return this;
    }

    public void unsetCargo() {
      this.cargo = null;
    }

    /** Returns true if field cargo is set (has been assigned a value) and false otherwise */
    public boolean isSetCargo() {
      return this.cargo != null;
    }

    public void setCargoIsSet(boolean value) {
      if (!value) {
        this.cargo = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CARGO:
        if (value == null) {
          unsetCargo();
        } else {
          setCargo((Cargo)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CARGO:
        return getCargo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CARGO:
        return isSetCargo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof sendCargo_args)
        return this.equals((sendCargo_args)that);
      return false;
    }

    public boolean equals(sendCargo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cargo = true && this.isSetCargo();
      boolean that_present_cargo = true && that.isSetCargo();
      if (this_present_cargo || that_present_cargo) {
        if (!(this_present_cargo && that_present_cargo))
          return false;
        if (!this.cargo.equals(that.cargo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCargo()) ? 131071 : 524287);
      if (isSetCargo())
        hashCode = hashCode * 8191 + cargo.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sendCargo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCargo(), other.isSetCargo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCargo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cargo, other.cargo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendCargo_args(");
      boolean first = true;

      sb.append("cargo:");
      if (this.cargo == null) {
        sb.append("null");
      } else {
        sb.append(this.cargo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cargo != null) {
        cargo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendCargo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public sendCargo_argsStandardScheme getScheme() {
        return new sendCargo_argsStandardScheme();
      }
    }

    private static class sendCargo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendCargo_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, sendCargo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CARGO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cargo = new Cargo();
                struct.cargo.read(iprot);
                struct.setCargoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, sendCargo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cargo != null) {
          oprot.writeFieldBegin(CARGO_FIELD_DESC);
          struct.cargo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendCargo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public sendCargo_argsTupleScheme getScheme() {
        return new sendCargo_argsTupleScheme();
      }
    }

    private static class sendCargo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendCargo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendCargo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCargo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCargo()) {
          struct.cargo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendCargo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cargo = new Cargo();
          struct.cargo.read(iprot);
          struct.setCargoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class sendCargo_result implements org.apache.thrift.TBase<sendCargo_result, sendCargo_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendCargo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendCargo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField EMPTY_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("emptyException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField WEIGHT_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("weightException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendCargo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendCargo_resultTupleSchemeFactory();

    public int success; // required
    public @org.apache.thrift.annotation.Nullable EmptyCargoException emptyException; // required
    public @org.apache.thrift.annotation.Nullable CargoWeigtExceededException weightException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EMPTY_EXCEPTION((short)1, "emptyException"),
      WEIGHT_EXCEPTION((short)2, "weightException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EMPTY_EXCEPTION
            return EMPTY_EXCEPTION;
          case 2: // WEIGHT_EXCEPTION
            return WEIGHT_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EMPTY_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("emptyException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EmptyCargoException.class)));
      tmpMap.put(_Fields.WEIGHT_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("weightException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CargoWeigtExceededException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendCargo_result.class, metaDataMap);
    }

    public sendCargo_result() {
    }

    public sendCargo_result(
      int success,
      EmptyCargoException emptyException,
      CargoWeigtExceededException weightException)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.emptyException = emptyException;
      this.weightException = weightException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendCargo_result(sendCargo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEmptyException()) {
        this.emptyException = new EmptyCargoException(other.emptyException);
      }
      if (other.isSetWeightException()) {
        this.weightException = new CargoWeigtExceededException(other.weightException);
      }
    }

    @Override
    public sendCargo_result deepCopy() {
      return new sendCargo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.emptyException = null;
      this.weightException = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public sendCargo_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public EmptyCargoException getEmptyException() {
      return this.emptyException;
    }

    public sendCargo_result setEmptyException(@org.apache.thrift.annotation.Nullable EmptyCargoException emptyException) {
      this.emptyException = emptyException;
      return this;
    }

    public void unsetEmptyException() {
      this.emptyException = null;
    }

    /** Returns true if field emptyException is set (has been assigned a value) and false otherwise */
    public boolean isSetEmptyException() {
      return this.emptyException != null;
    }

    public void setEmptyExceptionIsSet(boolean value) {
      if (!value) {
        this.emptyException = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public CargoWeigtExceededException getWeightException() {
      return this.weightException;
    }

    public sendCargo_result setWeightException(@org.apache.thrift.annotation.Nullable CargoWeigtExceededException weightException) {
      this.weightException = weightException;
      return this;
    }

    public void unsetWeightException() {
      this.weightException = null;
    }

    /** Returns true if field weightException is set (has been assigned a value) and false otherwise */
    public boolean isSetWeightException() {
      return this.weightException != null;
    }

    public void setWeightExceptionIsSet(boolean value) {
      if (!value) {
        this.weightException = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      case EMPTY_EXCEPTION:
        if (value == null) {
          unsetEmptyException();
        } else {
          setEmptyException((EmptyCargoException)value);
        }
        break;

      case WEIGHT_EXCEPTION:
        if (value == null) {
          unsetWeightException();
        } else {
          setWeightException((CargoWeigtExceededException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EMPTY_EXCEPTION:
        return getEmptyException();

      case WEIGHT_EXCEPTION:
        return getWeightException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EMPTY_EXCEPTION:
        return isSetEmptyException();
      case WEIGHT_EXCEPTION:
        return isSetWeightException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof sendCargo_result)
        return this.equals((sendCargo_result)that);
      return false;
    }

    public boolean equals(sendCargo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_emptyException = true && this.isSetEmptyException();
      boolean that_present_emptyException = true && that.isSetEmptyException();
      if (this_present_emptyException || that_present_emptyException) {
        if (!(this_present_emptyException && that_present_emptyException))
          return false;
        if (!this.emptyException.equals(that.emptyException))
          return false;
      }

      boolean this_present_weightException = true && this.isSetWeightException();
      boolean that_present_weightException = true && that.isSetWeightException();
      if (this_present_weightException || that_present_weightException) {
        if (!(this_present_weightException && that_present_weightException))
          return false;
        if (!this.weightException.equals(that.weightException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      hashCode = hashCode * 8191 + ((isSetEmptyException()) ? 131071 : 524287);
      if (isSetEmptyException())
        hashCode = hashCode * 8191 + emptyException.hashCode();

      hashCode = hashCode * 8191 + ((isSetWeightException()) ? 131071 : 524287);
      if (isSetWeightException())
        hashCode = hashCode * 8191 + weightException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sendCargo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEmptyException(), other.isSetEmptyException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmptyException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emptyException, other.emptyException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetWeightException(), other.isSetWeightException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWeightException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weightException, other.weightException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendCargo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("emptyException:");
      if (this.emptyException == null) {
        sb.append("null");
      } else {
        sb.append(this.emptyException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("weightException:");
      if (this.weightException == null) {
        sb.append("null");
      } else {
        sb.append(this.weightException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendCargo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public sendCargo_resultStandardScheme getScheme() {
        return new sendCargo_resultStandardScheme();
      }
    }

    private static class sendCargo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendCargo_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, sendCargo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EMPTY_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.emptyException = new EmptyCargoException();
                struct.emptyException.read(iprot);
                struct.setEmptyExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WEIGHT_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.weightException = new CargoWeigtExceededException();
                struct.weightException.read(iprot);
                struct.setWeightExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, sendCargo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.emptyException != null) {
          oprot.writeFieldBegin(EMPTY_EXCEPTION_FIELD_DESC);
          struct.emptyException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.weightException != null) {
          oprot.writeFieldBegin(WEIGHT_EXCEPTION_FIELD_DESC);
          struct.weightException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendCargo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public sendCargo_resultTupleScheme getScheme() {
        return new sendCargo_resultTupleScheme();
      }
    }

    private static class sendCargo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendCargo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendCargo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEmptyException()) {
          optionals.set(1);
        }
        if (struct.isSetWeightException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetEmptyException()) {
          struct.emptyException.write(oprot);
        }
        if (struct.isSetWeightException()) {
          struct.weightException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendCargo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.emptyException = new EmptyCargoException();
          struct.emptyException.read(iprot);
          struct.setEmptyExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.weightException = new CargoWeigtExceededException();
          struct.weightException.read(iprot);
          struct.setWeightExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class checkStatusByHash_args implements org.apache.thrift.TBase<checkStatusByHash_args, checkStatusByHash_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkStatusByHash_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkStatusByHash_args");

    private static final org.apache.thrift.protocol.TField HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("hash", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkStatusByHash_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkStatusByHash_argsTupleSchemeFactory();

    public int hash; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HASH((short)1, "hash");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HASH
            return HASH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __HASH_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HASH, new org.apache.thrift.meta_data.FieldMetaData("hash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkStatusByHash_args.class, metaDataMap);
    }

    public checkStatusByHash_args() {
    }

    public checkStatusByHash_args(
      int hash)
    {
      this();
      this.hash = hash;
      setHashIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkStatusByHash_args(checkStatusByHash_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.hash = other.hash;
    }

    @Override
    public checkStatusByHash_args deepCopy() {
      return new checkStatusByHash_args(this);
    }

    @Override
    public void clear() {
      setHashIsSet(false);
      this.hash = 0;
    }

    public int getHash() {
      return this.hash;
    }

    public checkStatusByHash_args setHash(int hash) {
      this.hash = hash;
      setHashIsSet(true);
      return this;
    }

    public void unsetHash() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HASH_ISSET_ID);
    }

    /** Returns true if field hash is set (has been assigned a value) and false otherwise */
    public boolean isSetHash() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HASH_ISSET_ID);
    }

    public void setHashIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HASH_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case HASH:
        if (value == null) {
          unsetHash();
        } else {
          setHash((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HASH:
        return getHash();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HASH:
        return isSetHash();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof checkStatusByHash_args)
        return this.equals((checkStatusByHash_args)that);
      return false;
    }

    public boolean equals(checkStatusByHash_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hash = true;
      boolean that_present_hash = true;
      if (this_present_hash || that_present_hash) {
        if (!(this_present_hash && that_present_hash))
          return false;
        if (this.hash != that.hash)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + hash;

      return hashCode;
    }

    @Override
    public int compareTo(checkStatusByHash_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetHash(), other.isSetHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHash()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hash, other.hash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkStatusByHash_args(");
      boolean first = true;

      sb.append("hash:");
      sb.append(this.hash);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkStatusByHash_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public checkStatusByHash_argsStandardScheme getScheme() {
        return new checkStatusByHash_argsStandardScheme();
      }
    }

    private static class checkStatusByHash_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkStatusByHash_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, checkStatusByHash_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HASH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.hash = iprot.readI32();
                struct.setHashIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, checkStatusByHash_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(HASH_FIELD_DESC);
        oprot.writeI32(struct.hash);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkStatusByHash_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public checkStatusByHash_argsTupleScheme getScheme() {
        return new checkStatusByHash_argsTupleScheme();
      }
    }

    private static class checkStatusByHash_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkStatusByHash_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkStatusByHash_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHash()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHash()) {
          oprot.writeI32(struct.hash);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkStatusByHash_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.hash = iprot.readI32();
          struct.setHashIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class checkStatusByHash_result implements org.apache.thrift.TBase<checkStatusByHash_result, checkStatusByHash_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkStatusByHash_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkStatusByHash_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkStatusByHash_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkStatusByHash_resultTupleSchemeFactory();

    /**
     * 
     * @see DeliveryStatus
     */
    public @org.apache.thrift.annotation.Nullable DeliveryStatus success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see DeliveryStatus
       */
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DeliveryStatus.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkStatusByHash_result.class, metaDataMap);
    }

    public checkStatusByHash_result() {
    }

    public checkStatusByHash_result(
      DeliveryStatus success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkStatusByHash_result(checkStatusByHash_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    @Override
    public checkStatusByHash_result deepCopy() {
      return new checkStatusByHash_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see DeliveryStatus
     */
    @org.apache.thrift.annotation.Nullable
    public DeliveryStatus getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see DeliveryStatus
     */
    public checkStatusByHash_result setSuccess(@org.apache.thrift.annotation.Nullable DeliveryStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DeliveryStatus)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof checkStatusByHash_result)
        return this.equals((checkStatusByHash_result)that);
      return false;
    }

    public boolean equals(checkStatusByHash_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(checkStatusByHash_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkStatusByHash_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkStatusByHash_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public checkStatusByHash_resultStandardScheme getScheme() {
        return new checkStatusByHash_resultStandardScheme();
      }
    }

    private static class checkStatusByHash_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkStatusByHash_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, checkStatusByHash_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.github.DeliveryStatus.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, checkStatusByHash_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkStatusByHash_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public checkStatusByHash_resultTupleScheme getScheme() {
        return new checkStatusByHash_resultTupleScheme();
      }
    }

    private static class checkStatusByHash_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkStatusByHash_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkStatusByHash_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkStatusByHash_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = com.github.DeliveryStatus.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
